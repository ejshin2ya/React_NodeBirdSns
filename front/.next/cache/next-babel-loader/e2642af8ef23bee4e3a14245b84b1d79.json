{"ast":null,"code":"import axios from \"axios\";\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_SUCCESS, SIGN_UP_REQUEST } from \"../reducers/user\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post(\"/api/signUp\");\n}\n\nfunction* signUp() {\n  try {\n    // const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"names":["axios","delay","put","takeLatest","all","fork","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_SUCCESS","SIGN_UP_REQUEST","logInAPI","data","post","logIn","action","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","watchLogIn","watchLogOut","watchSignUp","userSaga"],"sources":["C:/Users/eunjeong/Desktop/Front-end/인프런/NodeBirdSns/sagas/user.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\r\nimport {\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_SUCCESS,\r\n  SIGN_UP_REQUEST,\r\n} from \"../reducers/user\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/login\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI() {\r\n  return axios.post(\"/api/signUp\");\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    // const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,eAPF,EAQEC,eARF,EASEC,eATF,QAUO,kBAVP;;AAYA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;EACtB,OAAOhB,KAAK,CAACiB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;EACtB,IAAI;IACF;IACA,MAAMlB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACRkB,IAAI,EAAEZ,cADE;MAERQ,IAAI,EAAEG,MAAM,CAACH,IAFL,CAGR;;IAHQ,CAAD,CAAT;EAKD,CARD,CAQE,OAAOK,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEd,cADE;MAERgB,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,SAASQ,SAAT,GAAqB;EACnB,OAAOxB,KAAK,CAACiB,IAAN,CAAW,YAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,GAAmB;EACjB,IAAI;IACF;IACA,MAAMxB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACRkB,IAAI,EAAET,eADE,CAER;;IAFQ,CAAD,CAAT;EAID,CAPD,CAOE,OAAOU,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAEX,eADE;MAERa,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,SAASU,SAAT,GAAqB;EACnB,OAAO1B,KAAK,CAACiB,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;EACjB,IAAI;IACF;IACA,MAAM1B,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACRkB,IAAI,EAAEP,eADE,CAER;;IAFQ,CAAD,CAAT;EAID,CAPD,CAOE,OAAOQ,GAAP,EAAY;IACZ,MAAMnB,GAAG,CAAC;MACRkB,IAAI,EAAER,eADE;MAERU,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaP;IAFZ,CAAD,CAAT;EAID;AACF;;AAED,UAAUY,UAAV,GAAuB;EACrB,MAAMzB,UAAU,CAACI,cAAD,EAAiBW,KAAjB,CAAhB;AACD;;AAED,UAAUW,WAAV,GAAwB;EACtB,MAAM1B,UAAU,CAACO,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AAED,UAAUK,WAAV,GAAwB;EACtB,MAAM3B,UAAU,CAACW,eAAD,EAAkBa,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;EAClC,MAAM3B,GAAG,CAAC,CAACC,IAAI,CAACuB,UAAD,CAAL,EAAmBvB,IAAI,CAACwB,WAAD,CAAvB,EAAsCxB,IAAI,CAACyB,WAAD,CAA1C,CAAD,CAAT;AACD"},"metadata":{},"sourceType":"module"}