{"ast":null,"code":"import axios from \"axios\";\nimport { delay, put, takeLatest, all, fork, throttle, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POSTS_FAILURE, LIKE_POSTS_REQUEST, LIKE_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UNLIKE_POSTS_FAILURE, UNLIKE_POSTS_REQUEST, UNLIKE_POSTS_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/post\", {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n        data: result.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POSTS_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: LIKE_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POSTS_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: UNLIKE_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data); //Post /post/1/comment\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POSTS_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POSTS_REQUEST, unlikePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","delay","put","takeLatest","all","fork","throttle","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POSTS_FAILURE","LIKE_POSTS_REQUEST","LIKE_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UNLIKE_POSTS_FAILURE","UNLIKE_POSTS_REQUEST","UNLIKE_POSTS_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","result","type","id","err","response","likePostAPI","patch","likePost","LIKE_POST_TO_ME","unlikePostAPI","delete","unlikePost","UNLIKE_POST_TO_ME","loadPostsAPI","get","loadPosts","removePostAPI","removePost","addCommentAPI","postId","addComment","console","error","watchLikePost","watchUnlikePost","watchAddPost","watchLoadPosts","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/eunjeong/Desktop/Front-end/인프런/NodeBirdSns/front/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  delay,\r\n  put,\r\n  takeLatest,\r\n  all,\r\n  fork,\r\n  throttle,\r\n  call,\r\n} from \"redux-saga/effects\";\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LIKE_POSTS_FAILURE,\r\n  LIKE_POSTS_REQUEST,\r\n  LIKE_POSTS_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n  UNLIKE_POSTS_FAILURE,\r\n  UNLIKE_POSTS_REQUEST,\r\n  UNLIKE_POSTS_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/post\", { content: data });\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n        data: result.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: LIKE_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LIKE_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n    yield put({\r\n      type: UNLIKE_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNLIKE_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get(\"/posts\", data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data); //Post /post/1/comment\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POSTS_REQUEST, likePost);\r\n}\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POSTS_REQUEST, unlikePost);\r\n}\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}