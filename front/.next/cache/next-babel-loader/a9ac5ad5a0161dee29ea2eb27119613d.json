{"ast":null,"code":"import axios from \"axios\";\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\nimport shortId from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // data: result.data,\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"names":["axios","delay","put","takeLatest","all","fork","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"sources":["C:/Users/eunjeong/Desktop/Front-end/인프런/NodeBirdSns/sagas/post.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { delay, put, takeLatest, all, fork } from \"redux-saga/effects\";\r\nimport shortId from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortId.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      },\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.post(\"/api/post\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n      // data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,EAAiCC,GAAjC,EAAsCC,IAAtC,QAAkD,oBAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,mBAPF,EAQEC,mBARF,EASEC,mBATF,QAUO,kBAVP;AAWA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EACxB,OAAOnB,KAAK,CAACoB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;EACxB,IAAI;IACF;IACA,MAAMrB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMsB,EAAE,GAAGjB,OAAO,CAACkB,QAAR,EAAX;IACA,MAAMtB,GAAG,CAAC;MACRuB,IAAI,EAAEb,gBADE;MAERO,IAAI,EAAE;QACJI,EADI;QAEJG,OAAO,EAAEJ,MAAM,CAACH;MAFZ,CAFE,CAMR;;IANQ,CAAD,CAAT;IAQA,MAAMjB,GAAG,CAAC;MACRuB,IAAI,EAAET,cADE;MAERG,IAAI,EAAEI;IAFE,CAAD,CAAT;EAID,CAhBD,CAgBE,OAAOI,GAAP,EAAY;IACZ,MAAMzB,GAAG,CAAC;MACRuB,IAAI,EAAEf,gBADE;MAERS,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;IAFX,CAAD,CAAT;EAID;AACF;;AAED,SAASU,aAAT,CAAuBV,IAAvB,EAA6B;EAC3B,OAAOnB,KAAK,CAACoB,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUW,UAAV,CAAqBR,MAArB,EAA6B;EAC3B,IAAI;IACF;IACA,MAAMrB,KAAK,CAAC,IAAD,CAAX;IAEA,MAAMC,GAAG,CAAC;MACRuB,IAAI,EAAEV,mBADE;MAERI,IAAI,EAAEG,MAAM,CAACH,IAFL,CAGR;;IAHQ,CAAD,CAAT;IAKA,MAAMjB,GAAG,CAAC;MACRuB,IAAI,EAAER,iBADE;MAERE,IAAI,EAAEG,MAAM,CAACH;IAFL,CAAD,CAAT;EAID,CAbD,CAaE,OAAOQ,GAAP,EAAY;IACZ,MAAMzB,GAAG,CAAC;MACRuB,IAAI,EAAEZ,mBADE;MAERM,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;IAFX,CAAD,CAAT;EAID;AACF;;AAED,SAASY,aAAT,CAAuBZ,IAAvB,EAA6B;EAC3B,OAAOnB,KAAK,CAACoB,IAAN,CAAY,aAAYD,IAAI,CAACa,MAAO,UAApC,EAA+Cb,IAA/C,CAAP;AACD;;AAED,UAAUc,UAAV,CAAqBX,MAArB,EAA6B;EAC3B,IAAI;IACF;IACA,MAAMrB,KAAK,CAAC,IAAD,CAAX;IACA,MAAMC,GAAG,CAAC;MACRuB,IAAI,EAAEhB,mBADE;MAERU,IAAI,EAAEG,MAAM,CAACH,IAFL,CAGR;;IAHQ,CAAD,CAAT;EAKD,CARD,CAQE,OAAOQ,GAAP,EAAY;IACZ,MAAMzB,GAAG,CAAC;MACRuB,IAAI,EAAElB,mBADE;MAERY,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;IAFX,CAAD,CAAT;EAID;AACF;;AAED,UAAUe,YAAV,GAAyB;EACvB,MAAM/B,UAAU,CAACQ,gBAAD,EAAmBU,OAAnB,CAAhB;AACD;;AAED,UAAUc,eAAV,GAA4B;EAC1B,MAAMhC,UAAU,CAACW,mBAAD,EAAsBgB,UAAtB,CAAhB;AACD;;AAED,UAAUM,eAAV,GAA4B;EAC1B,MAAMjC,UAAU,CAACK,mBAAD,EAAsByB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUI,QAAV,GAAqB;EAClC,MAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC6B,YAAD,CAAL,EAAqB7B,IAAI,CAAC8B,eAAD,CAAzB,EAA4C9B,IAAI,CAAC+B,eAAD,CAAhD,CAAD,CAAT;AACD"},"metadata":{},"sourceType":"module"}